        -:    0:Source:src/Server.cpp
        -:    1:#include <sys/stat.h>
        -:    2:#include <fcntl.h>
        -:    3:#include <server.h>
        -:    4:
        -:    5:Utils ut;
        -:    6:
        1:    7:Server::Server()
        -:    8:{
        -:    9:    // default constructor
        1:   10:}
        -:   11:
        -:   12:/*
        -:   13: *  FUNCTION NAME   : createSocket
        -:   14: *
        -:   15: *  DESCRIPTION     : It creates server socket and sets IP address and port number also.
        -:   16: *
        -:   17: *  PARAMETERS		: none
        -:   18: *
        -:   19: *  RETURN 		    : void
        -:   20: *
        -:   21: */
        1:   22:void Server::createSocket()
        -:   23:{
        1:   24:    serverSockfd = socket(AF_INET, SOCK_STREAM, 0);
        1:   25:    if (serverSockfd < 0)
        -:   26:    {
    #####:   27:        ut.log(FATAL, "socket() error", S_LOGFILE);
    #####:   28:        exit(EXIT_FAILURE);
        -:   29:    }
        -:   30:
        1:   31:    server_addr.sin_family = AF_INET;
        1:   32:    server_addr.sin_port = htons(port);
        1:   33:    server_addr.sin_addr.s_addr = inet_addr(ipAddr); //(const char*)ipAddr.c_str());
        -:   34:
        1:   35:    cout << "[+] Server socket created Successfully" << endl;
        1:   36:}
        -:   37:/*
        -:   38: *  FUNCTION NAME	: bind_listen()
        -:   39: *
        -:   40: *  DESCRIPTION		: It binds the server to a port using bind() system call
        -:   41:                      and enables server to listen to clients using listen() system call listen() system call
        -:   42: *
        -:   43: *  PARAMETERS		: none
        -:   44: *
        -:   45: *  RETURN 		    : void
        -:   46: *
        -:   47: */
        1:   48:void Server::bind_listen()
        -:   49:{
        1:   50:    if (bind(serverSockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0)
        -:   51:    {
    #####:   52:        ut.log(FATAL, "bind() error", S_LOGFILE);
    #####:   53:        perror("bind() error: ");
    #####:   54:        exit(EXIT_FAILURE);
        -:   55:    }
        1:   56:    cout << "[+] Server bind to port" << endl;
        1:   57:    if (listen(serverSockfd, 7) < 0)
        -:   58:    {
    #####:   59:        ut.log(FATAL, "listen() error", S_LOGFILE);
    #####:   60:        exit(EXIT_FAILURE);
        -:   61:    }
        1:   62:    cout << "[+] Server listening to the clients" << endl;
        1:   63:} // end of blind_listen()
        -:   64:
        -:   65:/*
        -:   66: *  FUNCTION NAME	: acceptClient()
        -:   67: *
        -:   68: *  DESCRIPTION		: It creates a multi-client server enviorment by calling fork() system call
        -:   69:                        whenever a client gets accepted using accpet() call.
        -:   70: *
        -:   71: *  PARAMETERS		: none
        -:   72: *
        -:   73: *  RETURN 		    : void
        -:   74: *
        -:   75: */
        1:   76:void Server::acceptClient()
        -:   77:{
        1:   78:    len = sizeof(client_addr);
        -:   79:    while (true)
        -:   80:    {
        3:   81:        clientSockfd = accept(serverSockfd, (struct sockaddr *)&client_addr, &len);
        1:   82:        if (clientSockfd < 0)
        -:   83:        {
    #####:   84:            ut.log(FATAL, "accept() error", S_LOGFILE);
        -:   85:        }
        1:   86:        cout << "[+] Accepted the client " << ntohs(client_addr.sin_port) << endl;
        1:   87:        ut.log(INFO, "Server accepts the client", S_LOGFILE);
        -:   88:
        1:   89:        if (fork() == 0)
        -:   90:        {
        1:   91:            initClient(clientSockfd);
        -:   92:        }
        2:   93:        close(clientSockfd);
        -:   94:    }
        -:   95:} // end of acceptClient()
        -:   96:
        -:   97:/*
        -:   98: *  FUNCTION NAME	: initClient()
        -:   99: *
        -:  100: *  DESCRIPTION		: It initiates client after accepting and shows
        -:  101: *
        -:  102: *  PARAMETERS		: none
        -:  103: *
        -:  104: *  RETURN 		    : void
        -:  105: *
        -:  106: */
        1:  107:void Server::initClient(int newfd)
        -:  108:{
        1:  109:    User user;
        -:  110:
        1:  111:    char buf[MAX_BUFF] = {
        -:  112:        '\0',
        -:  113:    };
        -:  114:
        1:  115:    int flag = 0;
        -:  116:
        -:  117:    // fstream fs;
        1:  118:    string line;
        -:  119:    // MAIN MENU:
        -:  120:    while (1)
        -:  121:    {
        -:  122:        // receiving choice for main menu from clien side
        4:  123:        memset(&buf, 0, MAX_BUFF);
        4:  124:        recv(newfd, buf, MAX_BUFF, 0);
        -:  125:
        -:  126:        // connvert buffer value to int
        4:  127:        int choice = atoi(buf);
        4:  128:        int isExists = -1;
        4:  129:        switch (choice)
        -:  130:        {
        -:  131:        // Resgistration
        1:  132:        case 1:
        1:  133:            if (send(newfd, "register", strlen("register"), 0) < 0)
        -:  134:            {
    #####:  135:                ut.log(FATAL, "send() error", S_LOGFILE);
        -:  136:            }
        -:  137:
        -:  138:            // Receieving user UserID and Password in user object
        -:  139:            // memset(&user, 0, MAX_BUFF);
        -:  140:            // bzero(&user, sizeof(User));
        -:  141:
        1:  142:            if (recv(newfd, &user, sizeof(User), 0) < 0)
        -:  143:            {
    #####:  144:                ut.log(FATAL, "recv() error", S_LOGFILE);
        -:  145:            }
        -:  146:
        1:  147:            isExists = userExists(user);
        1:  148:            if (isExists == 1)
        -:  149:            {
    #####:  150:                if (send(newfd, "exists", strlen("exists"), 0) < 0)
        -:  151:                {
    #####:  152:                    ut.log(FATAL, "send() error", S_LOGFILE);
        -:  153:                }
        -:  154:            }
        1:  155:            else if (isExists == 0)
        -:  156:            {
        -:  157:                // storing user details in database
        1:  158:                user.toDatabase(user);
        -:  159:
        1:  160:                if (send(newfd, "success", strlen("success"), 0) < 0)
        -:  161:                {
    #####:  162:                    ut.log(FATAL, "send() error", S_LOGFILE);
        -:  163:                }
        -:  164:            }
        -:  165:            else
        -:  166:            {
    #####:  167:                if (send(newfd, "failed", strlen("failed"), 0) < 0)
        -:  168:                {
    #####:  169:                    ut.log(FATAL, "send() error", S_LOGFILE);
        -:  170:                }
        -:  171:            }
        1:  172:            memset(buf, 0, MAX_BUFF);
        1:  173:            recv(newfd, buf, MAX_BUFF, 0);
        1:  174:            break;
        -:  175:        // login
        1:  176:        case 2:
        1:  177:            if (send(newfd, "login", strlen("login"), 0) < 0)
        -:  178:            {
    #####:  179:                ut.log(FATAL, "send() error", S_LOGFILE);
        -:  180:            }
        -:  181:
        -:  182:            // memset(&user, 0, sizeof(User));
        -:  183:            // Receives the login credentials
        1:  184:            if (recv(newfd, &user, sizeof(User), 0) < 0)
        -:  185:            {
    #####:  186:                ut.log(FATAL, "recv() error", S_LOGFILE);
        -:  187:            }
        -:  188:
        -:  189:            // Verify if the login credentials matches the registered credentials
        1:  190:            flag = verifyLoginCreds(user);
        -:  191:
        1:  192:            if (flag == 1)
        -:  193:            {
        1:  194:                if (send(newfd, "loggedIn", strlen("loggedIn"), 0) < 0)
        -:  195:                {
    #####:  196:                    ut.log(FATAL, "send() error", S_LOGFILE);
        -:  197:                }
        -:  198:
        -:  199:                while (1)
        -:  200:                {
        -:  201:                    // resetting the buffer after login successful
        3:  202:                    memset(&buf, 0, MAX_BUFF);
        -:  203:
        -:  204:                    // receiving option from main menu
        3:  205:                    if (recv(newfd, buf, MAX_BUFF, 0) < 0)
        -:  206:                    {
        -:  207:
    #####:  208:                        if (flag == 1)
    #####:  209:                            ut.log(FATAL, "recv() error", S_LOGFILE);
        -:  210:                        //
        -:  211:                    }
        -:  212:
        3:  213:                    Operator op;
        3:  214:                    Customer cust;
        -:  215:                    bool isProcessed;
        3:  216:                    choice = atoi(buf);
        -:  217:                    switch (choice)
        -:  218:                    {
        1:  219:                    case 1: // Process CDR
        -:  220:
        1:  221:                        isProcessed = processCallData(op, cust);
        -:  222:
       1*:  223:                        isProcessed == true ? send(newfd, "processed", strlen("processed"), 0) : send(newfd, "notprocessed", strlen("notprocessed"), 0);
        1:  224:                        break;
        -:  225:
        3:  226:                    case 2: // Billing info
        -:  227:                        while (1)
        -:  228:                        {
        3:  229:                            memset(&buf, 0, MAX_BUFF);
        -:  230:
        -:  231:                            // receiving option from billing info menu
        3:  232:                            if (recv(newfd, buf, MAX_BUFF, 0) < 0)
        -:  233:                            {
    #####:  234:                                ut.log(FATAL, "recv() error", S_LOGFILE);
        -:  235:                                //
        -:  236:                            }
        3:  237:                            choice = atoi(buf);
        -:  238:                            switch (choice)
        -:  239:                            {
        3:  240:                            case 1: // Customer billing
        -:  241:                                while (1)
        -:  242:                                {
        3:  243:                                    memset(&buf, 0, MAX_BUFF);
        -:  244:
        -:  245:                                    // receiving option from customer billing menu
        3:  246:                                    if (recv(newfd, buf, MAX_BUFF, 0) < 0)
        -:  247:                                    {
    #####:  248:                                        ut.log(FATAL, "recv() error", S_LOGFILE);
        -:  249:                                        //
        -:  250:                                    }
        3:  251:                                    string msisdnSearchResult;
        -:  252:
        3:  253:                                    choice = atoi(buf);
        -:  254:                                    switch (choice)
        -:  255:                                    {
        1:  256:                                    case 1:
        1:  257:                                        if (send(newfd, "searchmsisdn", strlen("searchmsisdn"), 0) < 0)
        -:  258:                                        {
    #####:  259:                                            ut.log(FATAL, "send() error", S_LOGFILE);
        -:  260:                                            //
        -:  261:                                        }
        -:  262:
        1:  263:                                        memset(&buf, 0, MAX_BUFF);
        -:  264:
        -:  265:                                        // receiving MSISDN to be searched
        1:  266:                                        if (recv(newfd, buf, MAX_BUFF, 0) < 0)
        -:  267:                                        {
    #####:  268:                                            ut.log(FATAL, "recv() error", S_LOGFILE);
        -:  269:                                            //
        -:  270:                                        }
        -:  271:
        1:  272:                                        if (buf[0] == '\0')
    #####:  273:                                            break;
        -:  274:
        1:  275:                                        cust.processCDR();
        1:  276:                                        msisdnSearchResult = cust.searchMSISDN(stol(buf));
        -:  277:
        1:  278:                                        if (send(newfd, msisdnSearchResult.c_str(), msisdnSearchResult.length(), 0) < 0)
        -:  279:                                        {
    #####:  280:                                            ut.log(FATAL, "send() error", S_LOGFILE);
        -:  281:                                        }
        -:  282:
        1:  283:                                        break;
        1:  284:                                    case 2:
       1*:  285:                                        if (cust.processCDR() && cust.mapToFile())
        -:  286:                                        {
        -:  287:
        -:  288:                                            // sending file to client side
        1:  289:                                            if (send(newfd, "sending", strlen("sending"), 0) < 0)
        -:  290:                                            {
    #####:  291:                                                ut.log(FATAL, "send() error", S_LOGFILE);
        -:  292:                                            }
        -:  293:
        1:  294:                                            memset(&buf, 0, MAX_BUFF);
        -:  295:
        1:  296:                                            if (recv(newfd, buf, MAX_BUFF, 0) < 0)
        -:  297:                                            {
    #####:  298:                                                ut.log(FATAL, "recv() error", S_LOGFILE);
        -:  299:                                            }
        -:  300:
        1:  301:                                            if (strcmp(buf, "yes") == 0)
        -:  302:                                            {
        -:  303:
        1:  304:                                                if (sendFile(newfd, (char *)"data/CB.txt") == 1)
        -:  305:                                                {
        1:  306:                                                    ut.log(INFO, "File sent succesffuly.", S_LOGFILE);
        -:  307:                                                }
        -:  308:                                                else
        -:  309:                                                {
    #####:  310:                                                    ut.log(FATAL, "File not accessible.", S_LOGFILE);
        -:  311:                                                }
        -:  312:                                            }
        -:  313:
        -:  314:                                            // Receiving acknowledgement from client
        1:  315:                                            memset(&buf, 0, MAX_BUFF);
        1:  316:                                            if (recv(newfd, buf, MAX_BUFF, 0) < 0)
        -:  317:                                            {
    #####:  318:                                                ut.log(FATAL, "recv() error", S_LOGFILE);
    #####:  319:                                                break;
        -:  320:                                            }
        -:  321:                                            // Logging ack in logs
        -:  322:
        1:  323:                                            if (strcmp(buf, "SUCCESS") == 0)
        -:  324:                                            {
        1:  325:                                                ut.log(INFO, "Client Received the file successfully", S_LOGFILE);
        -:  326:                                            }
        -:  327:                                            else
        -:  328:                                            {
    #####:  329:                                                ut.log(INFO, "Client does not received the file", S_LOGFILE);
        -:  330:                                            }
        -:  331:                                        }
        -:  332:                                        else
        -:  333:                                        {
    #####:  334:                                            if (send(newfd, "error", strlen("error"), 0))
        -:  335:                                            {
    #####:  336:                                                ut.log(FATAL, "send() error", S_LOGFILE);
        -:  337:                                            }
        -:  338:                                        }
        -:  339:
        1:  340:                                        break;
        -:  341:
        1:  342:                                    case 3:
        1:  343:                                        break;
        -:  344:
    #####:  345:                                    default:
    #####:  346:                                        break;
        -:  347:                                    }
        -:  348:
        3:  349:                                    if (choice == 3 || buf[0] == '\0')
        -:  350:                                    {
        1:  351:                                        choice = 0;
        1:  352:                                        break;
        -:  353:                                    }
        5:  354:                                }
        1:  355:                                break;
        -:  356:
        3:  357:                            case 2: // interoperator billing
        -:  358:                                while (1)
        -:  359:                                {
        3:  360:                                    memset(&buf, 0, MAX_BUFF);
        -:  361:
        -:  362:                                    // receiving option from interoperator billing menu
        3:  363:                                    if (recv(newfd, buf, MAX_BUFF, 0) < 0)
        -:  364:                                    {
    #####:  365:                                        ut.log(FATAL, "recv() error", S_LOGFILE);
        -:  366:                                    }
        -:  367:
        3:  368:                                    string brandSearchResult;
        3:  369:                                    choice = atoi(buf);
        -:  370:
        -:  371:                                    switch (choice)
        -:  372:                                    {
        1:  373:                                    case 1:
        1:  374:                                        if (send(newfd, "searchbrand", strlen("searchbrand"), 0) < 0)
        -:  375:                                        {
    #####:  376:                                            ut.log(FATAL, "send() error", S_LOGFILE);
        -:  377:                                            //
        -:  378:                                        }
        -:  379:
        1:  380:                                        memset(&buf, 0, MAX_BUFF);
        -:  381:
        -:  382:                                        // receiving brand name to be searched
        1:  383:                                        if (recv(newfd, buf, MAX_BUFF, 0) < 0)
        -:  384:                                        {
    #####:  385:                                            ut.log(FATAL, "recv() error", S_LOGFILE);
        -:  386:                                            //
        -:  387:                                        }
        -:  388:
        1:  389:                                        op.processCDR();
        1:  390:                                        brandSearchResult = op.searchBrandName(buf);
        -:  391:
        1:  392:                                        if (send(newfd, brandSearchResult.c_str(), brandSearchResult.length(), 0) < 0)
        -:  393:                                        {
    #####:  394:                                            ut.log(FATAL, "send() error", S_LOGFILE);
        -:  395:                                        }
        -:  396:
        1:  397:                                        break;
        -:  398:
        1:  399:                                    case 2:
        -:  400:                                        // function for sending IOSB.txt to client
       1*:  401:                                        if (op.processCDR() && op.mapToFile())
        -:  402:                                        {
        -:  403:                                            // sending file to client side
        1:  404:                                            if (send(newfd, "sending", strlen("sending"), 0) < 0)
        -:  405:                                            {
    #####:  406:                                                ut.log(FATAL, "send() error", S_LOGFILE);
        -:  407:                                            }
        -:  408:
        1:  409:                                            memset(&buf, 0, MAX_BUFF);
        -:  410:
        1:  411:                                            if (recv(newfd, buf, MAX_BUFF, 0) < 0)
        -:  412:                                            {
    #####:  413:                                                ut.log(FATAL, "recv() error", S_LOGFILE);
        -:  414:                                            }
        -:  415:
        1:  416:                                            if (strcmp(buf, "yes") == 0)
        -:  417:                                            {
        1:  418:                                                if (sendFile(newfd, (char *)"data/IOSB.txt") == 1)
        -:  419:                                                {
        1:  420:                                                    ut.log(INFO, "File sent succesffuly.", S_LOGFILE);
        -:  421:                                                }
        -:  422:                                                else
        -:  423:                                                {
    #####:  424:                                                    ut.log(FATAL, "File not accessible.", S_LOGFILE);
        -:  425:                                                }
        -:  426:                                            }
        -:  427:
        -:  428:                                            // Receiving acknowledgement from client
        1:  429:                                            memset(&buf, 0, MAX_BUFF);
        1:  430:                                            if (recv(newfd, buf, MAX_BUFF, 0) < 0)
        -:  431:                                            {
    #####:  432:                                                ut.log(FATAL, "recv() error", S_LOGFILE);
    #####:  433:                                                break;
        -:  434:                                            }
        -:  435:                                            // Logging ack in logs
        -:  436:
        1:  437:                                            if (strcmp(buf, "SUCCESS") == 0)
        -:  438:                                            {
        1:  439:                                                ut.log(INFO, "Client Received the file successfully", S_LOGFILE);
        -:  440:                                            }
        -:  441:                                            else
        -:  442:                                            {
    #####:  443:                                                ut.log(INFO, "Client does not received the file", S_LOGFILE);
        -:  444:                                            }
        -:  445:                                        }
        -:  446:                                        else
        -:  447:                                        {
    #####:  448:                                            if (send(newfd, "error", strlen("error"), 0))
        -:  449:                                            {
    #####:  450:                                                ut.log(FATAL, "send() error", S_LOGFILE);
        -:  451:                                            }
        -:  452:                                        }
        -:  453:
        1:  454:                                        break;
        -:  455:
        1:  456:                                    case 3:
        1:  457:                                        break;
        -:  458:
    #####:  459:                                    default:
    #####:  460:                                        break;
        -:  461:                                    }
        -:  462:
        3:  463:                                    if (choice == 3 || buf[0] == '\0')
        -:  464:                                    {
        1:  465:                                        choice = 0;
        1:  466:                                        break;
        -:  467:                                    }
        5:  468:                                }
        1:  469:                                break;
        1:  470:                            case 3: // go back
        1:  471:                                break;
        -:  472:
    #####:  473:                            default:
    #####:  474:                                break;
        -:  475:                            }
        -:  476:
        3:  477:                            if (choice == 3 || buf[0] == '\0')
        -:  478:                            {
        1:  479:                                choice = 0;
        1:  480:                                break;
        -:  481:                            }
        2:  482:                        }
        1:  483:                        break;
        -:  484:
        1:  485:                    case 3: // Logout
        1:  486:                        break;
        -:  487:
    #####:  488:                    default:
    #####:  489:                        break;
        -:  490:                    }
        3:  491:                    if (choice == 3 || buf[0] == '\0')
        -:  492:                    {
        1:  493:                        choice = 0;
        1:  494:                        break;
        -:  495:                    }
        6:  496:                }
        -:  497:            }
    #####:  498:            else if (flag == 0)
        -:  499:            {
    #####:  500:                if (send(newfd, "failure", 8, 0) < 0)
        -:  501:                {
    #####:  502:                    ut.log(FATAL, "send() error", S_LOGFILE);
        -:  503:                }
        -:  504:            }
        -:  505:            else
        -:  506:            {
    #####:  507:                if (send(newfd, "DBerror", 8, 0) < 0)
        -:  508:                {
    #####:  509:                    ut.log(FATAL, "send() error", S_LOGFILE);
        -:  510:                }
        -:  511:            }
        1:  512:            break;
        -:  513:
        1:  514:        case 3:
        1:  515:            break;
        -:  516:
        1:  517:        default:
        1:  518:            break;
        -:  519:        }
        -:  520:
        4:  521:        if (buf[0] == '\0')
        -:  522:        {
        1:  523:            cout << "[-] Client " << ntohs(client_addr.sin_port) << " left the server." << endl;
        1:  524:            break;
        -:  525:        }
        3:  526:    }
        1:  527:} // end of initClient()
        -:  528:
        -:  529:/*
        -:  530: *  FUNCTION NAME	: userExists()
        -:  531: *
        -:  532: *  DESCRIPTION		: It checks the given username exists in the database or not,
        -:  533:                      A return value of 1 indicates user exists, 0 indicates user does not exists and -1 indicates database error.
        -:  534: *
        -:  535: *  PARAMETERS		: User &newUser
        -:  536: *
        -:  537: *  RETURN 		    : int
        -:  538: *
        -:  539: */
        1:  540:int Server::userExists(User &newUser)
        -:  541:{
        1:  542:    User user;
        1:  543:    fstream userDB;
        -:  544:
        -:  545:    // make directory if not exists
        1:  546:    mkdir("data", 0777);
        1:  547:    userDB.open(USER_DB, ios::out | ios::in);
        -:  548:
        1:  549:    if (userDB)
        -:  550:    {
        9:  551:        while (!userDB.eof())
        -:  552:        {
        8:  553:            userDB.read((char *)&user, sizeof(user));
        8:  554:            if (strcmp(newUser.getUsername(), user.getUsername()) == 0)
        -:  555:            {
    #####:  556:                return 1;
        -:  557:            }
        -:  558:        }
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:        return -1;
        -:  563:    }
        1:  564:    return 0;
        1:  565:} // end of userExists()
        -:  566:
        -:  567:/*
        -:  568: *  FUNCTION NAME	: verifyLoginCreds()
        -:  569: *
        -:  570: *  DESCRIPTION		: It verifies the given credentials from database,
        -:  571:                      A return value of 1 indicates successful verification, 0 indicates unsucessful verification and -1 indicates database error.
        -:  572: *
        -:  573: *  PARAMETERS		: User &newUser
        -:  574: *
        -:  575: *  RETURN 		    : int
        -:  576: *
        -:  577: */
        1:  578:int Server::verifyLoginCreds(User &newUser)
        -:  579:{
        1:  580:    User user;
        1:  581:    fstream userDB;
        -:  582:
        1:  583:    userDB.open(USER_DB, ios::out | ios::in);
        -:  584:
        1:  585:    if (userDB)
        -:  586:    {
        3:  587:        while (!userDB.eof())
        -:  588:        {
        -:  589:
        3:  590:            userDB.read((char *)&user, sizeof(user));
        -:  591:
        3:  592:            if ((strcmp(newUser.getUsername(), user.getUsername()) == 0) && (strcmp(newUser.getPassword(), user.getPassword()) == 0))
        -:  593:            {
        1:  594:                return 1;
        -:  595:            }
        -:  596:        }
        -:  597:    }
        -:  598:    else
        -:  599:    {
    #####:  600:        return -1;
        -:  601:    }
        -:  602:
    #####:  603:    return 0;
        1:  604:} // end of verifyLoginCreds()
        -:  605:
        -:  606:/*
        -:  607: *  FUNCTION NAME	: processCallData()
        -:  608: *
        -:  609: *  DESCRIPTION		: It invokes processAndCreateFile() function for objects of both Operator and Customer classes parallely through threads,
        -:  610:                      and returns true if both functions return true, and returns false if any fails.
        -:  611: *
        -:  612: *  PARAMETERS		: User &op, Customer &cust
        -:  613: *
        -:  614: *  RETURN 		    : bool
        -:  615: *
        -:  616: */
        1:  617:bool Server::processCallData(Operator &op, Customer &cust)
        -:  618:{
        -:  619:
        1:  620:    promise<bool> opPromise;
        1:  621:    promise<bool> custPromise;
        -:  622:
        1:  623:    thread t1(&Operator::processAndCreateFile, &op, &opPromise);
        1:  624:    thread t2(&Customer::processAndCreateFile, &cust, &custPromise);
        -:  625:
        1:  626:    if (t1.joinable())
        1:  627:        t1.join();
        -:  628:
        1:  629:    if (t2.joinable())
        1:  630:        t2.join();
        -:  631:
        1:  632:    future<bool> opFuture = opPromise.get_future();
        1:  633:    future<bool> custFuture = custPromise.get_future();
        -:  634:
       1*:  635:    if (opFuture.get() && custFuture.get())
        -:  636:    {
        1:  637:        return true;
        -:  638:    }
    #####:  639:    return false;
        1:  640:} // end of processCallData()
        -:  641:
        -:  642:/*
        -:  643: *  FUNCTION NAME	: sendFile()
        -:  644: *
        -:  645: *  DESCRIPTION		: It send file to client by streaming the data 
        -:  646:                      A return value of 1 indicates successful transfer, 0 indicates unsuccessful transfer. 
        -:  647: *
        -:  648: *  PARAMETERS		: int newfd, char *filename
        -:  649: *
        -:  650: *  RETURN 		    : int
        -:  651: *
        -:  652: */
        2:  653:int Server::sendFile(int newfd, char *filename)
        -:  654:{
        2:  655:    char bufr[MAX_BUFF] = {'\0'};
        -:  656:
        2:  657:    string line;
        2:  658:    ifstream file;
        2:  659:    file.open(filename);
        -:  660:
        2:  661:    if (file.is_open())
        -:  662:    {
  1077381:  663:        while (!file.eof())
        -:  664:        {
  1077379:  665:            getline(file, line);
  1077379:  666:            strcpy(bufr, line.c_str());
  1077379:  667:            if (send(newfd, bufr, sizeof(bufr), 0) < 0)
        -:  668:            {
    #####:  669:                ut.log(FATAL, "file send() error", S_LOGFILE);
    #####:  670:                return 0;
        -:  671:            }
        -:  672:
  1077379:  673:            memset(bufr, 0, MAX_BUFF);
        -:  674:        }
        -:  675:        // Sending EOF msg to client
        2:  676:        if (send(newfd, "EOF", strlen("EOF"), 0) < 0)
        -:  677:        {
    #####:  678:            ut.log(FATAL, "EOF send() error", S_LOGFILE);
    #####:  679:            return 0;
        -:  680:        }
        -:  681:    }
        -:  682:    else
        -:  683:    {
    #####:  684:        if (send(newfd, "openErr", strlen("openErr"), 0) < 0)
        -:  685:        {
    #####:  686:            ut.log(FATAL, "Could not send file.", S_LOGFILE);
    #####:  687:            return 0;
        -:  688:        }
        -:  689:    }
        2:  690:    file.close();
        2:  691:    return 1;
        2:  692:} // end of senfile()
        -:  693:
        -:  694:// function to close the server socket
        2:  695:void Server::closeServer()
        -:  696:{
        2:  697:    close(serverSockfd);
        2:  698:}
