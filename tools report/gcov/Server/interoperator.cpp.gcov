        -:    0:Source:src/interoperator.cpp
        -:    1:#include <interoperator.h>
        -:    2:#include <utils.h>
        -:    3:
        -:    4:Utils utl;
        -:    5:
       13:    6:Operator::Operator()
        -:    7:{
        -:    8:    // default constructor
       13:    9:}
        -:   10:
       10:   11:Operator::Operator(string brandName, long MMC, long inCall, long outCall, long down, long up, long incMsg, long outMsg)
        -:   12:{
       10:   13:    this->MMC = MMC;
       10:   14:    this->brandName = brandName;
       10:   15:    this->inCallDuration = inCall;
       10:   16:    this->outCallDuration = outCall;
       10:   17:    this->downData = down;
       10:   18:    this->upData = up;
       10:   19:    this->inMsg = incMsg;
       10:   20:    this->outMsg = outMsg;
       10:   21:}
        -:   22:
        -:   23:// setters functions
    59808:   24:void Operator::setOutCallDuration(long outCallDuration) { this->outCallDuration = outCallDuration; }
    59933:   25:void Operator::setInCallDuration(long inCallDuration) { this->inCallDuration = inCallDuration; }
    60792:   26:void Operator::setDownloadData(long downData) { this->downData = downData; }
    60792:   27:void Operator::setUploadData(long upData) { this->upData = upData; }
    59224:   28:void Operator::setInMsg(long inMsg) { this->inMsg = inMsg; }
    60233:   29:void Operator::setOutMsg(long outMsg)
        -:   30:{
    60233:   31:    this->outMsg = outMsg;
    60233:   32:}
        -:   33:// getters functions
    59944:   34:long Operator::getInCallDuration() { return inCallDuration; }
    59819:   35:long Operator::getOutCallDuration() { return outCallDuration; }
    60803:   36:long Operator::getDownloadData() { return downData; }
    60803:   37:long Operator::getUploadData()
        -:   38:{
    60803:   39:    return upData;
        -:   40:}
    59235:   41:long Operator::getInMsg() { return inMsg; }
    60244:   42:long Operator::getOutMsg() { return outMsg; }
       11:   43:long Operator::getMMC() { return MMC; }
       14:   44:string Operator::getBrandName() { return brandName; }
        -:   45:
        3:   46:bool Operator::processCDR()
        -:   47:{
        3:   48:    fstream dataCDR;
        3:   49:    dataCDR.open("data/data.cdr", ios::in);
        3:   50:    string line;
        3:   51:    string token;
        3:   52:    vector<string> parameters;
        3:   53:    if (dataCDR)
        -:   54:    {
   300003:   55:        while (getline(dataCDR, line))
        -:   56:        {
        -:   57:            // stringstream class check
   300000:   58:            stringstream check(line);
        -:   59:
        -:   60:            // Tokenizing w.r.t. space '|'
  3000000:   61:            while (getline(check, token, '|'))
        -:   62:            {
  2700000:   63:                parameters.push_back(token);
        -:   64:            }
        -:   65:
        -:   66:            // parameters[3] --> call type.
        -:   67:            // stol: converts the string as a argument in function call.
   300000:   68:            string brand = parameters[1];
   300000:   69:            long brandMMC = stol(parameters[2]);     // parameters[2]=brand MMC
   300000:   70:            long callDuration = stol(parameters[4]); // parameters[4]= (call duration)
   300000:   71:            long dataDownload = stol(parameters[5]); // parameters[5]= (data download)
   300000:   72:            long dataUpload = stol(parameters[6]);   // parameters[6]= (data upload)
        -:   73:
   300000:   74:            if (operatorsMap.count(brandMMC))
        -:   75:            {
   299990:   76:                if (parameters[3] == "MTC")
        -:   77:                {
    59933:   78:                    operatorsMap[brandMMC].setInCallDuration(operatorsMap[brandMMC].getInCallDuration() + callDuration);
        -:   79:                }
   240057:   80:                else if (parameters[3] == "MOC")
        -:   81:                {
    59808:   82:                    operatorsMap[brandMMC].setOutCallDuration(operatorsMap[brandMMC].getOutCallDuration() + callDuration);
        -:   83:                }
   180249:   84:                else if (parameters[3] == "SMS-MT")
        -:   85:                {
    59224:   86:                    operatorsMap[brandMMC].setInMsg(operatorsMap[brandMMC].getInMsg() + 1);
        -:   87:                }
   121025:   88:                else if (parameters[3] == "SMS-MO")
        -:   89:                {
    60233:   90:                    operatorsMap[brandMMC].setOutMsg(operatorsMap[brandMMC].getOutMsg() + 1);
        -:   91:                }
        -:   92:                else
        -:   93:                {
    60792:   94:                    operatorsMap[brandMMC].setDownloadData(operatorsMap[brandMMC].getDownloadData() + dataDownload);
    60792:   95:                    operatorsMap[brandMMC].setUploadData(operatorsMap[brandMMC].getUploadData() + dataUpload);
        -:   96:                }
        -:   97:            }
       10:   98:            else if (parameters[3] == "MTC")
        -:   99:            {
        -:  100:                // Operator::Operator(string brandName, long MMC, long inCall, long outCall, long down, long up, long incMsg, long outMsg)
        4:  101:                Operator newOp(brand, brandMMC, callDuration, 0, 0, 0, 0, 0);
        4:  102:                operatorsMap[brandMMC] = newOp;
        4:  103:            }
        6:  104:            else if (parameters[3] == "MOC")
        -:  105:            {
    #####:  106:                Operator newOp(brand, brandMMC, 0, callDuration, 0, 0, 0, 0);
    #####:  107:                operatorsMap[brandMMC] = newOp;
    #####:  108:            }
        6:  109:            else if (parameters[3] == "SMS-MT")
        -:  110:            {
        2:  111:                Operator newOp(brand, brandMMC, 0, 0, 0, 0, 1, 0);
        2:  112:                operatorsMap[brandMMC] = newOp;
        2:  113:            }
        4:  114:            else if (parameters[3] == "SMS-MO")
        -:  115:            {
        4:  116:                Operator newOp(brand, brandMMC, 0, 0, 0, 0, 0, 1);
        4:  117:                operatorsMap[brandMMC] = newOp;
        4:  118:            }
        -:  119:            else
        -:  120:            {
    #####:  121:                Operator newOp(brand, brandMMC, 0, 0, dataDownload, dataUpload, 0, 0);
    #####:  122:                operatorsMap[brandMMC] = newOp;
    #####:  123:            }
        -:  124:
   300000:  125:            parameters.clear();
   300000:  126:        }
        -:  127:
        -:  128:        // closing data.cdr
        3:  129:        dataCDR.close();
        -:  130:
        -:  131:        // if (IOSB)
        -:  132:        // {
        -:  133:        //     mapToFile(IOSB);
        -:  134:
        -:  135:        //     // closing IOSB.txt
        -:  136:        //     IOSB.close();
        -:  137:        // }
        -:  138:        // else
        -:  139:        // {
        -:  140:        //     perror("IOSB.txt File error: ");
        -:  141:        //     return false;
        -:  142:        // }
        -:  143:    }
        -:  144:    else
        -:  145:    {
    #####:  146:        perror("data.cdr File error: ");
    #####:  147:        utl.log(FATAL, "data.cdr could not be opened", S_LOGFILE);
    #####:  148:        return false;
        -:  149:    }
        -:  150:
        3:  151:    return true;
        3:  152:}
        -:  153:
        2:  154:bool Operator::mapToFile()
        -:  155:{
        2:  156:    fstream IOSB;
        2:  157:    IOSB.open("data/IOSB.txt", ios::out);
        -:  158:
        2:  159:    if (IOSB)
        -:  160:    {
        2:  161:        IOSB << "=========== OPERATOR DATA BASE ===========\n\n";
        2:  162:        map<long, Operator>::iterator opr;
       12:  163:        for (opr = operatorsMap.begin(); opr != operatorsMap.end(); opr++)
        -:  164:        {
       10:  165:            Operator oprData = opr->second;
       10:  166:            IOSB << oprToString(oprData);
       10:  167:        }
        2:  168:        IOSB.close();
        -:  169:    }
        -:  170:    else
        -:  171:    {
    #####:  172:        utl.log(FATAL, "IOSB.txt could not be opened", S_LOGFILE);
    #####:  173:        return false;
        -:  174:    }
        -:  175:
        2:  176:    return true;
        2:  177:}
        -:  178:
        1:  179:string Operator::searchBrandName(string brand)
        -:  180:{
        1:  181:    string result;
        1:  182:    map<long, Operator>::iterator opr;
        3:  183:    for (opr = operatorsMap.begin(); opr != operatorsMap.end(); opr++)
        -:  184:    {
        3:  185:        Operator oprData = opr->second;
        3:  186:        if (utl.toLowerCase(oprData.getBrandName()) == utl.toLowerCase(brand))
        -:  187:        {
        1:  188:            result = oprToString(oprData);
        1:  189:            return result;
        -:  190:        }
        3:  191:    }
        -:  192:
        -:  193:    // checking if brand name is invalid
    #####:  194:    string notFound = "Brand name doesn't exist.";
    #####:  195:    return notFound;
       1*:  196:}
        -:  197:
       11:  198:string Operator::oprToString(Operator &oprData)
        -:  199:{
       11:  200:    ostringstream ss;
       11:  201:    ss.clear();
        -:  202:
       22:  203:    ss << "Operator Brand: " << oprData.getBrandName() << "(" << oprData.getMMC() << ")" << endl
        -:  204:       << "\t"
       11:  205:       << "Incoming Call Duration: " << oprData.getInCallDuration() << endl
        -:  206:       << "\t"
       11:  207:       << "Outgoing Call Duration: " << oprData.getOutCallDuration() << endl
        -:  208:       << "\t"
       11:  209:       << "Incoming Messages: " << oprData.getInMsg() << endl
        -:  210:       << "\t"
       11:  211:       << "Outgoing Messages: " << oprData.getOutMsg() << endl
        -:  212:       << "\t"
       11:  213:       << "GPRS usage: " << endl
        -:  214:       << "\t"
        -:  215:       << "\t"
       11:  216:       << "Downloaded Data: " << oprData.getDownloadData() << " MB" << endl
        -:  217:       << "\t"
        -:  218:       << "\t"
       11:  219:       << "Uploaded Data: " << oprData.getUploadData() << " MB" << endl
       11:  220:       << endl;
        -:  221:
       22:  222:    return ss.str();
       11:  223:}
        -:  224:
        1:  225:bool Operator::processAndCreateFile(promise<bool> *isProcessed)
        -:  226:{
        1:  227:    bool process = processCDR();
        1:  228:    bool toFile = mapToFile();
        -:  229:
        1:  230:    if (process && toFile)
        -:  231:    {
        1:  232:        isProcessed->set_value(true);
        1:  233:        return true;
        -:  234:    }
        -:  235:
    #####:  236:    isProcessed->set_value(false);
    #####:  237:    return false;
        -:  238:}
        -:  239:
       36:  240:Operator::~Operator()
        -:  241:{
        -:  242:    // default constructor
       36:  243:}
