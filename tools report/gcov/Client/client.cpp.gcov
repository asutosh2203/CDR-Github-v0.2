        -:    0:Source:src/client.cpp
        -:    1:#include <client.h>
        -:    2:#include <sys/stat.h>
        -:    3:#include <fcntl.h>
        -:    4:
        -:    5:Utils clientUtil;
        -:    6:
        -:    7:// default constructor
        1:    8:Client::Client() {}
        -:    9:
        -:   10:// parameterized constructor
        -:   11:
        -:   12:/*
        -:   13: *  FUNCTION NAME	: processAndCreateFile
        -:   14: *
        -:   15: *  DESCRIPTION		: It switches on menuType and shows the required menu to the client accordingly.
        -:   16: *
        -:   17: *  PARAMETERS		: int menuType
        -:   18: *
        -:   19: *  RETURN 		: void
        -:   20: *
        -:   21: */
       15:   22:void showMenu(int menuType)
        -:   23:{
       15:   24:    system("clear");
        -:   25:
        -:   26:    //  main menu
       15:   27:    if (menuType == 0)
        -:   28:    {
        3:   29:        cout << "WELCOME TO CALL DATA RECORDS\n";
        3:   30:        cout << "\nDo you want to register or login?" << endl;
        3:   31:        cout << "\t1. Register" << endl;
        3:   32:        cout << "\t2. Login" << endl;
        3:   33:        cout << "\t3. Exit" << endl;
        -:   34:    }
        -:   35:    // services menu
       12:   36:    else if (menuType == 1)
        -:   37:    {
        3:   38:        cout << "====== SERVICES ======" << endl;
        3:   39:        cout << "\t1. Process CDR" << endl;
        3:   40:        cout << "\t2. Billing Info" << endl;
        3:   41:        cout << "\t3. Logout" << endl;
        -:   42:    }
        -:   43:    // billing info menu
        9:   44:    else if (menuType == 2)
        -:   45:    {
        3:   46:        cout << "====== BILLING INFO MENU ======" << endl;
        3:   47:        cout << "\t1. Customer Billing" << endl;
        3:   48:        cout << "\t2. Interoperator Billing" << endl;
        3:   49:        cout << "\t3. Go Back" << endl;
        -:   50:    }
        -:   51:    // customer billing menu
        6:   52:    else if (menuType == 3)
        -:   53:    {
        3:   54:        cout << "====== CUSTOMER BILLING MENU ======" << endl;
        3:   55:        cout << "\t1. Search for MSISDN" << endl;
        3:   56:        cout << "\t2. Download Customer Billing Data" << endl;
        3:   57:        cout << "\t3. Go Back" << endl;
        -:   58:    }
        -:   59:    // interoperator billing menu
        -:   60:    else
        -:   61:    {
        3:   62:        cout << "====== INTEROPERATOR BILLING MENU ======" << endl;
        3:   63:        cout << "\t1. Search for Brand Name" << endl;
        3:   64:        cout << "\t2. Download Interoperator Billing Data" << endl;
        3:   65:        cout << "\t3. Go Back" << endl;
        -:   66:    }
       15:   67:    cout << "Choose your option: ";
       15:   68:} // end of showMenu()
        -:   69:
        -:   70:/*
        -:   71: *  FUNCTION NAME	: createSocket
        -:   72: *
        -:   73: *  DESCRIPTION		: It creates client socket and sets IP address and port number also.
        -:   74: *
        -:   75: *  PARAMETERS		: none
        -:   76: *
        -:   77: *  RETURN 		: void
        -:   78: *
        -:   79: */
        1:   80:void Client::createSocket()
        -:   81:{
        1:   82:    sockfd = socket(AF_INET, SOCK_STREAM, 0);
        -:   83:
        1:   84:    if (sockfd < 0)
        -:   85:    {
    #####:   86:        perror("socket() error: ");
    #####:   87:        exit(EXIT_FAILURE);
        -:   88:    }
        1:   89:    cout << "[+]Client socket created successfully" << endl;
        -:   90:
        1:   91:    bzero(&serverAddr, sizeof(SA_IN));
        -:   92:
        1:   93:    serverAddr.sin_family = AF_INET;
        1:   94:    serverAddr.sin_port = htons(port);
        1:   95:    serverAddr.sin_addr.s_addr = inet_addr((const char *)ipAddr);
        1:   96:} // end of createSocket()
        -:   97:
        -:   98:/*
        -:   99: *  FUNCTION NAME	: clientConnect
        -:  100: *
        -:  101: *  DESCRIPTION		: It establishes a connection with the server
        -:  102: *
        -:  103: *  PARAMETERS		: none
        -:  104: *
        -:  105: *  RETURN 		: void
        -:  106: *
        -:  107: */
        1:  108:void Client::clientConnect()
        -:  109:{
        1:  110:    if (connect(sockfd, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0)
        -:  111:    {
    #####:  112:        perror("connect() error: ");
    #####:  113:        exit(EXIT_FAILURE);
        -:  114:    }
        1:  115:    clientUtil.log(INFO, "Connection Established", C_LOGFILE);
        1:  116:}
        -:  117:
        -:  118:/*
        -:  119: *  FUNCTION NAME	: writeToFile
        -:  120: *
        -:  121: *  DESCRIPTION		: It receives data from the server's sendFile funtion and writes it into the given filename.
        -:  122: *
        -:  123: *  PARAMETERS		: int clientFD, char *filename
        -:  124: *
        -:  125: *  RETURN 		: int
        -:  126: *
        -:  127: */
        2:  128:int Client::writeToFile(int clientFD, char *filename)
        -:  129:{
        -:  130:    // creating data/downloads
        2:  131:    mkdir("data", 0777);
        2:  132:    int dataFD = open("data", O_DIRECTORY);
        2:  133:    mkdirat(dataFD, "downloads", 0777);
        -:  134:
        -:  135:    // FILE *fp;
        2:  136:    char buff[MAX_BUFF] = {'\0'};
        -:  137:
        2:  138:    ofstream file;
        2:  139:    file.open(filename);
        -:  140:
        2:  141:    if (file.is_open())
        -:  142:    {
        -:  143:        // infinite loop to recevie data from server and store it in a file on client side
        -:  144:        while (true)
        -:  145:        {
  1077381:  146:            memset(buff, 0, MAX_BUFF);
        -:  147:
        -:  148:            // log and return when recv() fail
  1077381:  149:            if (recv(clientFD, buff, MAX_BUFF, 0) < 0)
        -:  150:            {
    #####:  151:                clientUtil.log(FATAL, "recv() error", C_LOGFILE);
    #####:  152:                return 0;
        -:  153:            }
        -:  154:            // Return 1 when EOF
  1077381:  155:            if (strcmp(buff, "EOF") == 0)
        -:  156:            {
        2:  157:                return 1;
        -:  158:            }
        -:  159:
  1077379:  160:            if (strcmp(buff, "openErr") == 0)
        -:  161:            {
    #####:  162:                return 0;
        -:  163:            }
        -:  164:
        -:  165:            // writing in file
  1077379:  166:            file << buff << endl;
        -:  167:        }
        -:  168:    } // end of if block
        -:  169:    else
        -:  170:    {
    #####:  171:        return 0;
        -:  172:    }
        -:  173:
        -:  174:    // closing filestream object
        -:  175:    file.close();
        -:  176:
        -:  177:    return 1;
        2:  178:} // end of writeToFile()
        -:  179:
        -:  180:/*
        -:  181: *  FUNCTION NAME	: getUserChoice
        -:  182: *
        -:  183: *  DESCRIPTION		: It prompts the client to give an input, validates and returns it.
        -:  184: *
        -:  185: *  PARAMETERS		: None
        -:  186: *
        -:  187: *  RETURN 		: int
        -:  188: *
        -:  189: */
       15:  190:int getUserChoice()
        -:  191:{
        -:  192:    int choice;
        -:  193:
        -:  194:    while (1)
        -:  195:    {
      15*:  196:        cin >> choice;
        -:  197:
       15:  198:        if (cin.fail())
        -:  199:        {
        -:  200:            // get rid of failure state
    #####:  201:            cin.clear();
        -:  202:
        -:  203:            // discard 'bad' character(s)
    #####:  204:            cin.ignore(INT64_MAX, '\n');
        -:  205:        }
        -:  206:
       15:  207:        if (choice == 1 || choice == 2 || choice == 3)
        -:  208:        {
        -:  209:            break;
        -:  210:        }
        -:  211:        else
        -:  212:        {
    #####:  213:            cout << "Invalid Choice. Please choose option: ";
        -:  214:        }
        -:  215:    }
       15:  216:    return choice;
        -:  217:} // end of getUSerChoice()
        -:  218:
        -:  219:// It exits the client process on fatal error.
    #####:  220:void clientErrExit()
        -:  221:{
    #####:  222:    cout << "Could not connect to server. Try again!" << endl;
    #####:  223:    perror("Client error ");
    #####:  224:    exit(EXIT_FAILURE);
        -:  225:}
        -:  226:
        -:  227:// Pauses for the client to press enter and continue
        2:  228:void pressEnter()
        -:  229:{
        2:  230:    cout << "Press ENTER to continue";
        -:  231:    // cin.ignore();
        2:  232:    getchar();
        2:  233:}
        -:  234:
        -:  235:/*
        -:  236: *  FUNCTION NAME	: validateInput
        -:  237: *
        -:  238: *  DESCRIPTION		: It takes a string and validates it based on the inputType.
        -:  239: *
        -:  240: *  PARAMETERS		: string str, int inputType
        -:  241: *
        -:  242: *  RETURN 		: bool
        -:  243: *
        -:  244: */
        2:  245:bool validateInput(string str, int inputType)
        -:  246:{
        2:  247:    int l = str.length();
        -:  248:
        -:  249:    // validate MSISDN
        2:  250:    if (inputType == 0)
        -:  251:    {
        1:  252:        if (l != 7)
        -:  253:        {
    #####:  254:            return false;
        -:  255:        }
        -:  256:
        8:  257:        for (int i = 0; i < l; i++)
        -:  258:        {
        7:  259:            char s = str.at(i);
        -:  260:
        7:  261:            if (s == ' ')
        -:  262:            {
    #####:  263:                return false;
        -:  264:            }
        -:  265:
        7:  266:            if (s < 48 || s > 57)
        -:  267:            {
    #####:  268:                return false;
        -:  269:            }
        -:  270:        }
        -:  271:
        1:  272:        return true;
        -:  273:    }
        -:  274:
        -:  275:    // validate Brand name
        1:  276:    if (inputType == 1)
        -:  277:    {
        4:  278:        for (int i = 0; i < l; i++)
        -:  279:        {
        3:  280:            char s = str.at(i);
        3:  281:            if (s == 10)
        -:  282:            {
    #####:  283:                return false;
        -:  284:            }
        -:  285:        }
        -:  286:
        1:  287:        return true;
        -:  288:    }
        -:  289:
    #####:  290:    return false;
        -:  291:} // end of validateInput
        -:  292:
        -:  293:// default deconstructor
        1:  294:Client::~Client()
        -:  295:{
        1:  296:}
