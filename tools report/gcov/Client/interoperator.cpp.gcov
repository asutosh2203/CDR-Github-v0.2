        -:    0:Source:src/interoperator.cpp
        -:    1:#include <interoperator.h>
        -:    2:#include <utils.h>
        -:    3:
        -:    4:map<long, Operator> operatorsMap;
        -:    5:
        -:    6:Utils utl;
        -:    7:
    #####:    8:Operator::Operator()
        -:    9:{
        -:   10:    // default constructor
    #####:   11:}
        -:   12:
    #####:   13:Operator::Operator(string brandName, long MMC, long inCall, long outCall, long down, long up, long incMsg, long outMsg)
        -:   14:{
    #####:   15:    this->MMC = MMC;
    #####:   16:    this->brandName = brandName;
    #####:   17:    this->inCallDuration = inCall;
    #####:   18:    this->outCallDuration = outCall;
    #####:   19:    this->downData = down;
    #####:   20:    this->upData = up;
    #####:   21:    this->inMsg = incMsg;
    #####:   22:    this->outMsg = outMsg;
    #####:   23:}
        -:   24:
        -:   25:// setters functions
    #####:   26:void Operator::setOutCallDuration(long outCallDuration) { this->outCallDuration = outCallDuration; }
    #####:   27:void Operator::setInCallDuration(long inCallDuration) { this->inCallDuration = inCallDuration; }
    #####:   28:void Operator::setDownloadData(long downData) { this->downData = downData; }
    #####:   29:void Operator::setUploadData(long upData) { this->upData = upData; }
    #####:   30:void Operator::setInMsg(long inMsg) { this->inMsg = inMsg; }
    #####:   31:void Operator::setOutMsg(long outMsg)
        -:   32:{
    #####:   33:    this->outMsg = outMsg;
    #####:   34:}
        -:   35:// getters functions
    #####:   36:long Operator::getInCallDuration() { return inCallDuration; }
    #####:   37:long Operator::getOutCallDuration() { return outCallDuration; }
    #####:   38:long Operator::getDownloadData() { return downData; }
    #####:   39:long Operator::getUploadData()
        -:   40:{
    #####:   41:    return upData;
        -:   42:}
    #####:   43:long Operator::getInMsg() { return inMsg; }
    #####:   44:long Operator::getOutMsg() { return outMsg; }
    #####:   45:long Operator::getMMC() { return MMC; }
    #####:   46:string Operator::getBrandName() { return brandName; }
        -:   47:
        -:   48:/*
        -:   49: *  FUNCTION NAME	: processCDR
        -:   50: *
        -:   51: *  DESCRIPTION		: It takes the data from data.cdr and puts it into STL containers after formatting
        -:   52: *
        -:   53: *  PARAMETERS		: None
        -:   54: *
        -:   55: *  RETURN 		    : bool
        -:   56: *
        -:   57: */
    #####:   58:bool Operator::processCDR()
        -:   59:{
    #####:   60:    fstream dataCDR;
    #####:   61:    dataCDR.open("data/data.cdr", ios::in);
    #####:   62:    string line = "";
    #####:   63:    string token = "";
    #####:   64:    vector<string> parameters;
    #####:   65:    if (dataCDR)
        -:   66:    {
    #####:   67:        while (getline(dataCDR, line))
        -:   68:        {
        -:   69:            // stringstream class check
    #####:   70:            stringstream check(line);
        -:   71:
        -:   72:            // Tokenizing w.r.t. space '|'
    #####:   73:            while (getline(check, token, '|'))
        -:   74:            {
    #####:   75:                parameters.push_back(token);
        -:   76:            }
        -:   77:
        -:   78:            // stol: converts the string to long data type
    #####:   79:            string brand = parameters[1];
    #####:   80:            long brandMMC = stol(parameters[2]);
    #####:   81:            long callDuration = stol(parameters[4]);
    #####:   82:            long dataDownload = stol(parameters[5]);
    #####:   83:            long dataUpload = stol(parameters[6]);
        -:   84:
        -:   85:            // checking if a brand MMC already exists in the operators map
    #####:   86:            if (operatorsMap.count(brandMMC))
        -:   87:            {
    #####:   88:                if (parameters[3] == "MTC")
        -:   89:                {
    #####:   90:                    operatorsMap[brandMMC].setInCallDuration(operatorsMap[brandMMC].getInCallDuration() + callDuration);
        -:   91:                }
    #####:   92:                else if (parameters[3] == "MOC")
        -:   93:                {
    #####:   94:                    operatorsMap[brandMMC].setOutCallDuration(operatorsMap[brandMMC].getOutCallDuration() + callDuration);
        -:   95:                }
    #####:   96:                else if (parameters[3] == "SMS-MT")
        -:   97:                {
    #####:   98:                    operatorsMap[brandMMC].setInMsg(operatorsMap[brandMMC].getInMsg() + 1);
        -:   99:                }
    #####:  100:                else if (parameters[3] == "SMS-MO")
        -:  101:                {
    #####:  102:                    operatorsMap[brandMMC].setOutMsg(operatorsMap[brandMMC].getOutMsg() + 1);
        -:  103:                }
        -:  104:                else
        -:  105:                {
    #####:  106:                    operatorsMap[brandMMC].setDownloadData(operatorsMap[brandMMC].getDownloadData() + dataDownload);
    #####:  107:                    operatorsMap[brandMMC].setUploadData(operatorsMap[brandMMC].getUploadData() + dataUpload);
        -:  108:                }
        -:  109:            }
    #####:  110:            else if (parameters[3] == "MTC")
        -:  111:            {
    #####:  112:                Operator newOp(brand, brandMMC, callDuration, 0, 0, 0, 0, 0);
    #####:  113:                operatorsMap[brandMMC] = newOp;
    #####:  114:            }
    #####:  115:            else if (parameters[3] == "MOC")
        -:  116:            {
    #####:  117:                Operator newOp(brand, brandMMC, 0, callDuration, 0, 0, 0, 0);
    #####:  118:                operatorsMap[brandMMC] = newOp;
    #####:  119:            }
    #####:  120:            else if (parameters[3] == "SMS-MT")
        -:  121:            {
    #####:  122:                Operator newOp(brand, brandMMC, 0, 0, 0, 0, 1, 0);
    #####:  123:                operatorsMap[brandMMC] = newOp;
    #####:  124:            }
    #####:  125:            else if (parameters[3] == "SMS-MO")
        -:  126:            {
    #####:  127:                Operator newOp(brand, brandMMC, 0, 0, 0, 0, 0, 1);
    #####:  128:                operatorsMap[brandMMC] = newOp;
    #####:  129:            }
        -:  130:            else
        -:  131:            {
    #####:  132:                Operator newOp(brand, brandMMC, 0, 0, dataDownload, dataUpload, 0, 0);
    #####:  133:                operatorsMap[brandMMC] = newOp;
    #####:  134:            }
        -:  135:
    #####:  136:            parameters.clear();
    #####:  137:        } // end of while loop
        -:  138:
        -:  139:        // closing data.cdr
    #####:  140:        dataCDR.close();
        -:  141:    } // end of if block
        -:  142:    else
        -:  143:    {
    #####:  144:        perror("data.cdr File error: ");
    #####:  145:        utl.log(FATAL, "data.cdr could not be opened", S_LOGFILE);
    #####:  146:        return false;
        -:  147:    }
        -:  148:
    #####:  149:    return true;
    #####:  150:} // end of processCDR()
        -:  151:
        -:  152:/*
        -:  153: *  FUNCTION NAME	: mapToFile
        -:  154: *
        -:  155: *  DESCRIPTION		: It takes the data from operatorsMap and puts it into IOSB.txt after formatting
        -:  156: *
        -:  157: *  PARAMETERS		: None
        -:  158: *
        -:  159: *  RETURN 		: bool
        -:  160: *
        -:  161: */
    #####:  162:bool Operator::mapToFile()
        -:  163:{
    #####:  164:    fstream IOSB;
    #####:  165:    IOSB.open("data/IOSB.txt", ios::out);
        -:  166:
    #####:  167:    if (IOSB)
        -:  168:    {
    #####:  169:        IOSB << "=========== OPERATOR DATA BASE ===========\n\n";
    #####:  170:        map<long, Operator>::iterator opr;
    #####:  171:        for (opr = operatorsMap.begin(); opr != operatorsMap.end(); opr++)
        -:  172:        {
    #####:  173:            Operator oprData = opr->second;
    #####:  174:            IOSB << oprToString(oprData);
    #####:  175:        }
    #####:  176:        IOSB.close();
        -:  177:    }
        -:  178:    else
        -:  179:    {
    #####:  180:        utl.log(FATAL, "IOSB.txt could not be opened", S_LOGFILE);
    #####:  181:        return false;
        -:  182:    }
        -:  183:
    #####:  184:    return true;
    #####:  185:} // end of mapToFile()
        -:  186:
        -:  187:/*
        -:  188: *  FUNCTION NAME	: searchBrandName
        -:  189: *
        -:  190: *  DESCRIPTION		: It takes a string as parameter, searches for it in the operatorsMap 
        -:  191:                       and returns the formatted result.
        -:  192: *
        -:  193: *  PARAMETERS		: string brand
        -:  194: *
        -:  195: *  RETURN 		: string
        -:  196: *
        -:  197: */
    #####:  198:string Operator::searchBrandName(string brand)
        -:  199:{
    #####:  200:    string result;
    #####:  201:    map<long, Operator>::iterator opr;
    #####:  202:    for (opr = operatorsMap.begin(); opr != operatorsMap.end(); opr++)
        -:  203:    {
    #####:  204:        Operator oprData = opr->second;
    #####:  205:        if (utl.toLowerCase(oprData.getBrandName()) == utl.toLowerCase(brand))
        -:  206:        {
    #####:  207:            result = oprToString(oprData);
    #####:  208:            return result;
        -:  209:        }
    #####:  210:    }
        -:  211:
        -:  212:    // checking if brand name is invalid
    #####:  213:    string notFound = "Brand name doesn't exist.";
    #####:  214:    return notFound;
    #####:  215:} // end of searchBrandName()
        -:  216:
        -:  217:/*
        -:  218: *  FUNCTION NAME	: oprToString
        -:  219: *
        -:  220: *  DESCRIPTION		: It takes an object of Operator type, formats the data and returns it in a string
        -:  221: *
        -:  222: *  PARAMETERS		: Operator &oprData
        -:  223: *
        -:  224: *  RETURN 		: string
        -:  225: *
        -:  226: */
    #####:  227:string Operator::oprToString(Operator &oprData)
        -:  228:{
    #####:  229:    ostringstream ss;
    #####:  230:    ss.clear();
        -:  231:
    #####:  232:    ss << "Operator Brand: " << oprData.getBrandName() << "(" << oprData.getMMC() << ")" << endl
        -:  233:       << "\t"
    #####:  234:       << "Incoming Call Duration: " << oprData.getInCallDuration() << endl
        -:  235:       << "\t"
    #####:  236:       << "Outgoing Call Duration: " << oprData.getOutCallDuration() << endl
        -:  237:       << "\t"
    #####:  238:       << "Incoming Messages: " << oprData.getInMsg() << endl
        -:  239:       << "\t"
    #####:  240:       << "Outgoing Messages: " << oprData.getOutMsg() << endl
        -:  241:       << "\t"
    #####:  242:       << "GPRS usage: " << endl
        -:  243:       << "\t"
        -:  244:       << "\t"
    #####:  245:       << "Downloaded Data: " << oprData.getDownloadData() << " MB" << endl
        -:  246:       << "\t"
        -:  247:       << "\t"
    #####:  248:       << "Uploaded Data: " << oprData.getUploadData() << " MB" << endl
    #####:  249:       << endl;
        -:  250:
    #####:  251:    return ss.str();
    #####:  252:} // end of oprToString()
        -:  253:
        -:  254:/*
        -:  255: *  FUNCTION NAME	: processAndCreateFile
        -:  256: *
        -:  257: *  DESCRIPTION		: It invokes processCDR and mapToFile and returns true on successful processing 
        -:  258:                       and file creation, false otherwise.
        -:  259: *
        -:  260: *  PARAMETERS		: promise<bool> *isProcessed
        -:  261: *
        -:  262: *  RETURN 		: bool
        -:  263: *
        -:  264: */
    #####:  265:bool Operator::processAndCreateFile(promise<bool> *isProcessed)
        -:  266:{
    #####:  267:    bool process = processCDR();
    #####:  268:    bool toFile = mapToFile();
        -:  269:
    #####:  270:    if (process && toFile)
        -:  271:    {
    #####:  272:        isProcessed->set_value(true);
    #####:  273:        return true;
        -:  274:    }
        -:  275:
    #####:  276:    isProcessed->set_value(false);
    #####:  277:    return false;
        -:  278:} //end of processAndCreateFile
        -:  279:
    #####:  280:Operator::~Operator()
        -:  281:{
        -:  282:    // default constructor
    #####:  283:}
